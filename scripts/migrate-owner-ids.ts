import { eq } from "drizzle-orm";
import { nanoid } from "nanoid";

import { db } from "@/app/db";
import { ownersTable, propertiesTable } from "@/app/db/schema";

/**
 * Script para migrar IDs de propriet√°rios de serial para nanoid
 * Este script deve ser executado AP√ìS a migra√ß√£o de schema
 */
async function migrateOwnerIds() {
  console.log("üîÑ Iniciando migra√ß√£o de IDs de propriet√°rios...");

  try {
    // 1. Buscar todos os propriet√°rios existentes
    const owners = await db.select().from(ownersTable);
    console.log(`üìä Encontrados ${owners.length} propriet√°rios para migrar`);

    if (owners.length === 0) {
      console.log("‚úÖ Nenhum propriet√°rio encontrado. Migra√ß√£o completa!");
      return;
    }

    // 2. Para cada propriet√°rio, gerar novo ID e atualizar refer√™ncias
    for (const owner of owners) {
      const oldId = owner.id;
      const newId = nanoid();

      console.log(`üîÑ Migrando propriet√°rio ${oldId} -> ${newId}`);

      // 2a. Atualizar propriedades que referenciam este propriet√°rio
      const propertiesUpdated = await db
        .update(propertiesTable)
        .set({ ownerId: newId })
        .where(eq(propertiesTable.ownerId, oldId));

      console.log(
        `  üìù Propriedades atualizadas: ${propertiesUpdated.rowCount || 0}`,
      );

      // 2b. Atualizar o ID do propriet√°rio
      await db
        .update(ownersTable)
        .set({ id: newId })
        .where(eq(ownersTable.id, oldId));

      console.log(`  ‚úÖ Propriet√°rio ${oldId} migrado para ${newId}`);
    }

    console.log("üéâ Migra√ß√£o de IDs de propriet√°rios conclu√≠da com sucesso!");
  } catch (error) {
    console.error("‚ùå Erro durante a migra√ß√£o:", error);
    throw error;
  }
}

// Fun√ß√£o para reverter a migra√ß√£o (em caso de problemas)
async function rollbackOwnerIds() {
  console.log("‚ö†Ô∏è  ATEN√á√ÉO: Esta fun√ß√£o est√° apenas como refer√™ncia");
  console.log(
    "   Para reverter, voc√™ precisar√° de um backup do banco original",
  );
  console.log("   N√£o execute este rollback sem ter certeza!");
}

// Executar migra√ß√£o
if (require.main === module) {
  migrateOwnerIds()
    .then(() => {
      console.log("‚úÖ Script de migra√ß√£o finalizado");
      process.exit(0);
    })
    .catch((error) => {
      console.error("‚ùå Falha na migra√ß√£o:", error);
      process.exit(1);
    });
}

export { migrateOwnerIds, rollbackOwnerIds };
