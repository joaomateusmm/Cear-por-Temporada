import { db } from "@/app/db";
import { ownersTable } from "@/app/db/schema";
import { registerOwner } from "@/lib/owner-actions";

/**
 * Script de teste para verificar se o registro de propriet√°rios
 * est√° funcionando com os novos IDs nanoid
 */
async function testOwnerRegistration() {
  console.log("üß™ Testando registro de propriet√°rio com nanoid...");

  try {
    // 1. Testar diretamente com a fun√ß√£o registerOwner
    const testOwnerData = {
      fullName: "Jo√£o Teste da Silva",
      email: `teste${Date.now()}@email.com`,
      password: "senha123",
      phone: "(85) 9 9999-9999",
    };

    console.log("üìù Criando propriet√°rio de teste...");
    const newOwner = await registerOwner(testOwnerData);

    console.log("‚úÖ Propriet√°rio criado com sucesso!");
    console.log(`üìä ID gerado: ${newOwner.id}`);
    console.log(`üìä Tamanho do ID: ${newOwner.id.length} caracteres`);
    console.log(`üìä Nome: ${newOwner.fullName}`);
    console.log(`üìä Email: ${newOwner.email}`);

    // Verificar se √© um nanoid v√°lido (21 caracteres alfanum√©ricos)
    const isValidNanoid = /^[A-Za-z0-9_-]{21}$/.test(newOwner.id);
    console.log(`üìä ID √© nanoid v√°lido: ${isValidNanoid ? "‚úÖ" : "‚ùå"}`);

    return newOwner;
  } catch (error) {
    console.error("‚ùå Erro durante o teste:", error);
    return null;
  }
}

// Fun√ß√£o para testar login tamb√©m
async function testOwnerLogin(email: string, password: string) {
  console.log("üîê Testando login do propriet√°rio...");

  try {
    // Importar a fun√ß√£o de login
    const { loginOwner } = await import("@/lib/owner-actions");

    const result = await loginOwner({ email, password });

    console.log("‚úÖ Login realizado com sucesso!");
    console.log(`üìä ID do propriet√°rio logado: ${result.id}`);
    return result;
  } catch (error) {
    console.error("‚ùå Erro durante o teste de login:", error);
    return null;
  }
}

// Fun√ß√£o para listar todos os propriet√°rios
async function listAllOwners() {
  console.log("üìã Listando todos os propriet√°rios...");

  try {
    const owners = await db.select().from(ownersTable);
    console.log(`üìä Total de propriet√°rios: ${owners.length}`);

    owners.forEach((owner, index) => {
      console.log(
        `  ${index + 1}. ID: ${owner.id} | Nome: ${owner.fullName} | Email: ${owner.email}`,
      );
    });

    return owners;
  } catch (error) {
    console.error("‚ùå Erro ao listar propriet√°rios:", error);
    return [];
  }
}

// Executar testes
if (require.main === module) {
  async function runTests() {
    console.log("üöÄ Iniciando testes de propriet√°rios...\n");

    // Listar propriet√°rios existentes
    await listAllOwners();
    console.log("");

    // Testar cria√ß√£o
    const newOwner = await testOwnerRegistration();
    console.log("");

    if (newOwner) {
      // Testar login
      await testOwnerLogin(newOwner.email, "senha123");
      console.log("");

      // Listar novamente para mostrar o novo propriet√°rio
      await listAllOwners();
    }

    console.log("üéâ Testes conclu√≠dos!");
  }

  runTests()
    .then(() => {
      process.exit(0);
    })
    .catch((error) => {
      console.error("‚ùå Falha nos testes:", error);
      process.exit(1);
    });
}

export { listAllOwners, testOwnerLogin, testOwnerRegistration };
