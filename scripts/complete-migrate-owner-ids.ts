import { sql } from "drizzle-orm";
import { nanoid } from "nanoid";

import { db } from "@/app/db";
import { ownersTable, propertiesTable } from "@/app/db/schema";

interface OwnerBackup {
  id: string;
  fullName: string;
  email: string;
  password: string;
  phone: string | null;
  instagram: string | null;
  website: string | null;
  profileImage: string | null;
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
}

/**
 * Script completo para migrar IDs de propriet√°rios
 * 1. Faz backup dos dados
 * 2. Altera schema
 * 3. Migra dados com novos IDs
 */
async function completeMigrateOwnerIds() {
  console.log("üîÑ Iniciando migra√ß√£o completa de IDs de propriet√°rios...");

  try {
    // 1. Verificar estado atual
    const currentOwners = await db.select().from(ownersTable);
    console.log(`üìä Encontrados ${currentOwners.length} propriet√°rios`);

    if (currentOwners.length === 0) {
      console.log(
        "‚úÖ Nenhum propriet√°rio encontrado. Apenas atualizando schema...",
      );
      await updateSchema();
      return;
    }

    // Verificar se j√° est√° migrado
    if (currentOwners[0] && currentOwners[0].id.length === 21) {
      console.log(
        "‚úÖ IDs j√° est√£o no formato nanoid. Migra√ß√£o n√£o necess√°ria.",
      );
      return;
    }

    // 2. Fazer backup dos dados dos propriet√°rios
    console.log("üíæ Fazendo backup dos dados...");
    const ownerBackups: OwnerBackup[] = currentOwners.map((owner) => ({
      ...owner,
    }));

    // 3. Fazer backup das propriedades relacionadas
    const relatedProperties = await db
      .select()
      .from(propertiesTable)
      .where(sql`owner_id IS NOT NULL`);
    console.log(
      `üìä Encontradas ${relatedProperties.length} propriedades com propriet√°rios`,
    );

    // 4. Criar mapeamento old_id -> new_id
    const idMapping = new Map<string, string>();
    ownerBackups.forEach((owner) => {
      idMapping.set(owner.id, nanoid());
    });

    console.log("üîÑ Mapeamento de IDs:");
    idMapping.forEach((newId, oldId) => {
      console.log(`  ${oldId} -> ${newId}`);
    });

    // 5. Deletar todos os dados existentes (em ordem correta para respeitar FK)
    console.log("üóëÔ∏è Removendo dados existentes...");
    await db.delete(propertiesTable).where(sql`owner_id IS NOT NULL`);
    await db.delete(ownersTable);

    // 6. Atualizar schema
    await updateSchema();

    // 7. Reinserir propriet√°rios com novos IDs
    console.log("üì• Reinserindo propriet√°rios com novos IDs...");
    for (const ownerBackup of ownerBackups) {
      const newId = idMapping.get(ownerBackup.id)!;

      await db.insert(ownersTable).values({
        ...ownerBackup,
        id: newId,
      });

      console.log(
        `  ‚úÖ Propriet√°rio ${ownerBackup.fullName} reinserido com ID ${newId}`,
      );
    }

    // 8. Reinserir propriedades com owner_id atualizados
    console.log("üè† Reinserindo propriedades com owner_id atualizados...");
    for (const property of relatedProperties) {
      const newOwnerId = property.ownerId
        ? idMapping.get(property.ownerId)
        : null;

      await db.insert(propertiesTable).values({
        ...property,
        ownerId: newOwnerId,
      });

      console.log(
        `  ‚úÖ Propriedade ${property.title} reinserida com owner_id ${newOwnerId}`,
      );
    }

    console.log("üéâ Migra√ß√£o completa de IDs de propriet√°rios conclu√≠da!");
  } catch (error) {
    console.error("‚ùå Erro durante a migra√ß√£o:", error);
    console.log(
      "‚ö†Ô∏è  ATEN√á√ÉO: Dados podem ter sido perdidos. Restore do backup necess√°rio!",
    );
    throw error;
  }
}

async function updateSchema() {
  console.log("üîÑ Atualizando schema do banco...");

  try {
    // Alterar coluna owners.id
    await db.execute(sql`ALTER TABLE owners ALTER COLUMN id TYPE varchar(21)`);
    console.log("‚úÖ owners.id alterado para varchar(21)");

    // Alterar coluna properties.owner_id
    await db.execute(
      sql`ALTER TABLE properties ALTER COLUMN owner_id TYPE varchar(21)`,
    );
    console.log("‚úÖ properties.owner_id alterado para varchar(21)");
  } catch (error) {
    console.error("‚ùå Erro ao atualizar schema:", error);
    if (
      error instanceof Error &&
      error.toString().includes("cannot be cast automatically")
    ) {
      console.log("‚ÑπÔ∏è  Isso √© esperado - continuando com migra√ß√£o de dados...");
    } else {
      throw error;
    }
  }
}

// Fun√ß√£o para verificar integridade ap√≥s migra√ß√£o
async function verifyMigration() {
  console.log("üîç Verificando integridade da migra√ß√£o...");

  const owners = await db.select().from(ownersTable);
  const properties = await db
    .select()
    .from(propertiesTable)
    .where(sql`owner_id IS NOT NULL`);

  console.log(`üìä Propriet√°rios: ${owners.length}`);
  console.log(`üìä Propriedades com propriet√°rio: ${properties.length}`);

  // Verificar se todos os IDs s√£o nanoid (21 caracteres)
  const invalidOwnerIds = owners.filter((owner) => owner.id.length !== 21);
  const invalidPropertyOwnerIds = properties.filter(
    (prop) => prop.ownerId && prop.ownerId.length !== 21,
  );

  if (invalidOwnerIds.length > 0) {
    console.error(
      `‚ùå ${invalidOwnerIds.length} propriet√°rios com IDs inv√°lidos`,
    );
    return false;
  }

  if (invalidPropertyOwnerIds.length > 0) {
    console.error(
      `‚ùå ${invalidPropertyOwnerIds.length} propriedades com owner_id inv√°lidos`,
    );
    return false;
  }

  // Verificar se todas as refer√™ncias s√£o v√°lidas
  for (const property of properties) {
    if (property.ownerId) {
      const ownerExists = owners.some((owner) => owner.id === property.ownerId);
      if (!ownerExists) {
        console.error(
          `‚ùå Propriedade ${property.id} referencia owner inexistente: ${property.ownerId}`,
        );
        return false;
      }
    }
  }

  console.log("‚úÖ Migra√ß√£o verificada com sucesso!");
  return true;
}

// Executar migra√ß√£o
if (require.main === module) {
  completeMigrateOwnerIds()
    .then(() => verifyMigration())
    .then((success) => {
      if (success) {
        console.log("‚úÖ Script de migra√ß√£o finalizado com sucesso");
      } else {
        console.log("‚ùå Migra√ß√£o completada mas com problemas de integridade");
      }
      process.exit(success ? 0 : 1);
    })
    .catch((error) => {
      console.error("‚ùå Falha na migra√ß√£o:", error);
      process.exit(1);
    });
}

export { completeMigrateOwnerIds, verifyMigration };
